const fs = require('fs')
const esbuild = require('esbuild')
const { getPackageEntryPoints } = require('pkg-entry-points')
const path = require('path')

const cjsifyDirName = '.cjsify'
const targets = [
	'@planetscale/database',
	'aggregate-error',
	'cacheable-lookup',
	'cacheable-request',
	'clean-stack',
	'del',
	'escape-string-regexp',
	'execa',
	// ['fetch-blob', 'neutral'],
	'form-data-encoder',
	'FormData',
	'globby',
	'got',
	'human-signals',
	'indent-string',
	'ip-regex',
	'is',
	'is-ip',
	'is-online',
	'is-path-cwd',
	'is-path-inside',
	'is-stream',
	'lowercase-keys',
	'mimic-fn',
	'mimic-response',
	// 'node-fetch',
	'normalize-url',
	'npm-run-path',
	'onetime',
	'p-any',
	'p-cancelable',
	'p-limit',
	'p-map',
	'p-queue',
	'p-some',
	'p-timeout',
	'path-key',
	'public-ip',
	'responselike',
	'slash',
	'strip-final-newline',
	'yocto-queue'
]

void main()
async function main() {
	// Discover all ESM dependencies - get all package.json files in node_modules
	// const esmDependencies = targets
	// 	.map(dirName => {
	// 		// Read package.json if it exists
	// 		if (fs.existsSync(`node_modules/${dirName}/package.json`)) {
	// 			const packageJson = fs.readFileSync(
	// 				`node_modules/${dirName}/package.json`,
	// 				'utf8'
	// 			)
	// 			return JSON.parse(packageJson)
	// 		}
	// 		return null
	// 	})
	// 	.filter(packageJson => {
	// 		if (!packageJson) return false
	// 		return packageJson.type === 'module'
	// 	})

	// Unlink .cjsify if it exists
	// const cjsifyDirAbsolute = path.resolve('node_modules', cjsifyDirName)
	// if (fs.existsSync(cjsifyDirAbsolute)) {
	// 	fs.unlinkSync(cjsifyDirAbsolute)
	// }

	for (const target of targets) {
		const packageName = Array.isArray(target) ? target[0] : target
		const packageBuildOptions = Array.isArray(target) ? target[1] : {}
		const packageRootAbsolute = path.resolve('node_modules', packageName)
		const packageJson = JSON.parse(
			fs.readFileSync(`${packageRootAbsolute}/package.json`, 'utf8')
		)
		const entryPointsRaw = await getPackageEntryPoints(packageRootAbsolute)

		const entryPoints = {}
		if (typeof packageJson.main === 'string') {
			entryPoints['.'] = packageJson.main
		}
		if (
			typeof packageJson.exports === 'object' &&
			typeof packageJson.exports['default'] === 'string'
		) {
			entryPoints['.'] = packageJson.exports['default']
		}
		if (typeof packageJson.exports === 'string') {
			entryPoints['.'] = packageJson.exports
		}
		for (const key in entryPointsRaw) {
			const importableItems = entryPointsRaw[key].filter(item => {
				return (
					(item[0].includes('import') ||
						item[0].includes('require') ||
						item[0].includes('default')) &&
					!item[1].endsWith('.json')
				)
			})
			for (const item of importableItems) {
				const importPath = item[1]
				entryPoints[key] = importPath
			}
		}

		// For each entry point, bundle it as CJS
		for (const entryPoint in entryPoints) {
			const entryPointSrcPath = entryPoints[entryPoint]
			const entryPointSrcAbsolute = path.resolve(
				packageRootAbsolute,
				entryPointSrcPath
			)
			const outFileAbsolute = path.resolve(
				'node_modules',
				cjsifyDirName,
				packageJson.name,
				entryPointSrcPath
			)

			// Use esbuild to bundle the entry point and write to cjsEntryPointDir
			// console.log({
			// 	in: entryPointSrcAbsolute,
			// 	out: outFileAbsolute
			// })
			esbuild.buildSync({
				entryPoints: [entryPointSrcAbsolute],
				bundle: true,
				outfile: outFileAbsolute,
				// @ts-ignore
				platform: 'node',
				format: 'cjs',
				external: [
					'bufferjs/concat',
					'make-generator-function',
					'foreach',
					'tape'
				],
				...packageBuildOptions
			})
		}

		const defaultExport =
			entryPoints['./index.js'] ||
			entryPoints['./index.cjs'] ||
			entryPoints['./index.mjs'] ||
			entryPoints['/index.js'] ||
			entryPoints['/index.cjs'] ||
			entryPoints['/index.mjs'] ||
			entryPoints['index.js'] ||
			entryPoints['index.cjs'] ||
			entryPoints['index.mjs'] ||
			entryPoints['./'] ||
			entryPoints['/'] ||
			entryPoints['.']

		// Write CJS package.json
		if (Object.keys(entryPoints).length) {
			fs.writeFileSync(
				path.resolve(
					'node_modules',
					cjsifyDirName,
					packageJson.name,
					'package.json'
				),
				JSON.stringify(
					{
						name: packageJson.name,
						main: defaultExport,
						exports: entryPoints,
						...(packageJson.types
							? {
									types: path.resolve(
										packageRootAbsolute,
										packageJson.types
									)
							  }
							: {}),
						version: packageJson.version,
						description: `CJS version of ${packageJson.name} ${packageJson.version} (Generated by cjsify)`
					},
					null,
					2
				)
			)
		}
	}

	// 	// // Copy over any type declarations
	// 	// if (packageJson.types) {
	// 	// 	fs.copyFileSync(
	// 	// 		`node_modules/${packageJson.name}/${packageJson.types}`,
	// 	// 		`node_modules/${cjsEntryPointDir}/index.d.ts`
	// 	// 	)
	// 	// }
}
